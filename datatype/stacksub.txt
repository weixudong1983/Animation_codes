
栈是一种特殊的数据结构。
它遵循“后进先出”的原则。
这意味着最后放入的元素，
会最先被取出。
它是最基础却最常用的数据结构
计算机中很多场景都有它的影子
如函数调用栈、撤销操作、括号匹配、深度优先搜索。

想象一下你在厨房收拾碗盘。
你把一个盘子放在另一个盘子上，堆得越来越高。
可当你要取盘子时，总是先拿最上面的那一个。
程序中的“堆栈”也是这样工作的。
最后放进去的，最先被取出来。


向栈中添加元素叫“入栈”。
当你压入一个元素时，
它会被放在栈顶位置。
从栈中取出元素叫“出栈”。
当你弹出一个元素时，
则是从栈顶移除该元素。
下一个元素会成为新的栈顶。


如果所有元素都弹出了，
栈就变为空栈。
此时再执行出栈操作，
就会出现“堆栈下溢”错误。
反之，如果继续压入元素，
超出了栈的最大容量，
就会触发“栈溢出”错误。





栈可以通过两种方式实现：
一种是使用数组，
另一种是使用链表。
我们先从数组的实现方式开始。




我们使用 Python 编写示例代码。
首先定义一个名为 Stack 的类。

并初始化三个成员变量：
data 用于存放元素；
top 表示当前元素数量；
capacity 表示栈的最大容量。
在构造函数中，
我们设定默认容量为 6。

我们先看两个辅助函数为空和为满
当top 等于-1 
则栈表示空
当 top的索引为 capacity 时
则栈表示满

接着定义两个主要操作：
push（入栈）和 pop（出栈）。

push 方法用于向栈中添加元素。
它会先判断栈是否已满。
如果 top 等于 capacity - 1，
则抛出“栈上溢”错误。
否则将新元素加入 data 数组末尾，
并让 top 加 1。

pop 方法用于移除栈顶元素。
它先检查栈是否为空。
如果 为空，
则抛出“栈下溢”错误。
否则 top 减 1，
并删除并返回数组最后一个元素。

还有一个 peek 方法。
它用来查看栈顶元素，
但不会修改栈的内容。
peek 首先判断栈是否为空。
若为空则抛出下溢错误，
否则返回栈顶的值。









接下来我们用动画演示代码运行过程。
首先创建一个 Stack 对象。
栈的容量默认是 6。
中间显示的是抽象的栈结构，
右边的数组则表示实际存储。

初始化完成后，
我们向栈中压入几个元素。
入栈操作相当于在数组末尾追加数据，
这是一个常数时间操作。

peek 操作会返回栈顶元素，
也就是数组的最后一个元素。
它同样只需常数时间完成。

当执行出栈操作时，
会删除数组末尾的元素。
这也是一个常数时间操作。





接下来我们看看链表实现的方式。


在链表实现的栈中，
栈顶对应链表的头节点。
栈底对应链表的尾节点。
出栈时删除头节点；
入栈时在头部插入新节点。

我们同样先定义一个 Stack 类。
在构造函数中设定默认大小为 6。
然后初始化一个链表来保存数据。
同时记录最大容量和当前大小。

接着定义 push、pop 和 peek 操作。

push 函数接收一个要压入的值。
首先检查栈是否已满。
如果已满，则抛出“栈上溢”错误。
否则在链表头部插入新节点，
并让当前大小加 1。

pop 函数用于弹出元素。
它先判断栈是否为空。
如果为空，则抛出“栈下溢”错误。
否则当前大小减 1，
并删除链表头节点。

peek 函数与前面相似。
若栈为空，抛出错误；
否则返回链表头节点的数据，
但不删除它。

当我们创建 Stack 对象后，
右侧显示的是抽象的栈结构。
下方链表表示实际存储，
初始状态为空。

入栈操作对应在链表头插入节点。
这是一个常数时间操作。
出栈操作删除头节点，
也是常数时间。
peek 操作读取头节点的值，
同样只需常数时间。

理解链表结构非常重要，
这有助于你理解栈的实现方式。
我们频道还有链表和数组的详细视频，
你可以观看以获得更深入的理解。

最后我们看看栈的一个实际应用。
想象你正在使用绘图软件编辑图片。
你先擦掉一部分，
然后又添加颜色，
再画上新的内容。
这些操作依次被记录在栈中。
当你点击“撤销”时，
软件会从栈中依次弹出这些操作，
按相反顺序恢复之前的状态。
这就是栈在现实中的应用，
比如程序的撤销功能，
正是利用了栈这种数据结构。